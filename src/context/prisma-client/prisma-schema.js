module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCard {
  count: Int!
}

type AggregateCardField {
  count: Int!
}

type AggregateField {
  count: Int!
}

type AggregateFieldOption {
  count: Int!
}

type AggregateForm {
  count: Int!
}

type AggregateFormCard {
  count: Int!
}

type AggregateReport {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Card {
  id: ID!
  title: String
  grid: Int!
  formCard(where: FormCardWhereInput, orderBy: FormCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FormCard!]
  fields(where: CardFieldWhereInput, orderBy: CardFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardField!]
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  title: String
  grid: Int
  formCard: FormCardCreateManyWithoutCardInput
  fields: CardFieldCreateManyWithoutCardsInput
}

input CardCreateManyWithoutFieldsInput {
  create: [CardCreateWithoutFieldsInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateOneWithoutFormCardInput {
  create: CardCreateWithoutFormCardInput
  connect: CardWhereUniqueInput
}

input CardCreateWithoutFieldsInput {
  id: ID
  title: String
  grid: Int
  formCard: FormCardCreateManyWithoutCardInput
}

input CardCreateWithoutFormCardInput {
  id: ID
  title: String
  grid: Int
  fields: CardFieldCreateManyWithoutCardsInput
}

type CardEdge {
  node: Card!
  cursor: String!
}

type CardField {
  id: ID!
  order: Int!
  field: Field
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  groups(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Field!]
}

type CardFieldConnection {
  pageInfo: PageInfo!
  edges: [CardFieldEdge]!
  aggregate: AggregateCardField!
}

input CardFieldCreateInput {
  id: ID
  order: Int!
  field: FieldCreateOneWithoutCardFieldInput
  cards: CardCreateManyWithoutFieldsInput
  groups: FieldCreateManyWithoutGroupFieldsInput
}

input CardFieldCreateManyWithoutCardsInput {
  create: [CardFieldCreateWithoutCardsInput!]
  connect: [CardFieldWhereUniqueInput!]
}

input CardFieldCreateManyWithoutFieldInput {
  create: [CardFieldCreateWithoutFieldInput!]
  connect: [CardFieldWhereUniqueInput!]
}

input CardFieldCreateManyWithoutGroupsInput {
  create: [CardFieldCreateWithoutGroupsInput!]
  connect: [CardFieldWhereUniqueInput!]
}

input CardFieldCreateWithoutCardsInput {
  id: ID
  order: Int!
  field: FieldCreateOneWithoutCardFieldInput
  groups: FieldCreateManyWithoutGroupFieldsInput
}

input CardFieldCreateWithoutFieldInput {
  id: ID
  order: Int!
  cards: CardCreateManyWithoutFieldsInput
  groups: FieldCreateManyWithoutGroupFieldsInput
}

input CardFieldCreateWithoutGroupsInput {
  id: ID
  order: Int!
  field: FieldCreateOneWithoutCardFieldInput
  cards: CardCreateManyWithoutFieldsInput
}

type CardFieldEdge {
  node: CardField!
  cursor: String!
}

enum CardFieldOrderByInput {
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type CardFieldPreviousValues {
  id: ID!
  order: Int!
}

input CardFieldScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [CardFieldScalarWhereInput!]
  OR: [CardFieldScalarWhereInput!]
  NOT: [CardFieldScalarWhereInput!]
}

type CardFieldSubscriptionPayload {
  mutation: MutationType!
  node: CardField
  updatedFields: [String!]
  previousValues: CardFieldPreviousValues
}

input CardFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardFieldWhereInput
  AND: [CardFieldSubscriptionWhereInput!]
  OR: [CardFieldSubscriptionWhereInput!]
  NOT: [CardFieldSubscriptionWhereInput!]
}

input CardFieldUpdateInput {
  order: Int
  field: FieldUpdateOneWithoutCardFieldInput
  cards: CardUpdateManyWithoutFieldsInput
  groups: FieldUpdateManyWithoutGroupFieldsInput
}

input CardFieldUpdateManyDataInput {
  order: Int
}

input CardFieldUpdateManyMutationInput {
  order: Int
}

input CardFieldUpdateManyWithoutCardsInput {
  create: [CardFieldCreateWithoutCardsInput!]
  delete: [CardFieldWhereUniqueInput!]
  connect: [CardFieldWhereUniqueInput!]
  set: [CardFieldWhereUniqueInput!]
  disconnect: [CardFieldWhereUniqueInput!]
  update: [CardFieldUpdateWithWhereUniqueWithoutCardsInput!]
  upsert: [CardFieldUpsertWithWhereUniqueWithoutCardsInput!]
  deleteMany: [CardFieldScalarWhereInput!]
  updateMany: [CardFieldUpdateManyWithWhereNestedInput!]
}

input CardFieldUpdateManyWithoutFieldInput {
  create: [CardFieldCreateWithoutFieldInput!]
  delete: [CardFieldWhereUniqueInput!]
  connect: [CardFieldWhereUniqueInput!]
  set: [CardFieldWhereUniqueInput!]
  disconnect: [CardFieldWhereUniqueInput!]
  update: [CardFieldUpdateWithWhereUniqueWithoutFieldInput!]
  upsert: [CardFieldUpsertWithWhereUniqueWithoutFieldInput!]
  deleteMany: [CardFieldScalarWhereInput!]
  updateMany: [CardFieldUpdateManyWithWhereNestedInput!]
}

input CardFieldUpdateManyWithoutGroupsInput {
  create: [CardFieldCreateWithoutGroupsInput!]
  delete: [CardFieldWhereUniqueInput!]
  connect: [CardFieldWhereUniqueInput!]
  set: [CardFieldWhereUniqueInput!]
  disconnect: [CardFieldWhereUniqueInput!]
  update: [CardFieldUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [CardFieldUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [CardFieldScalarWhereInput!]
  updateMany: [CardFieldUpdateManyWithWhereNestedInput!]
}

input CardFieldUpdateManyWithWhereNestedInput {
  where: CardFieldScalarWhereInput!
  data: CardFieldUpdateManyDataInput!
}

input CardFieldUpdateWithoutCardsDataInput {
  order: Int
  field: FieldUpdateOneWithoutCardFieldInput
  groups: FieldUpdateManyWithoutGroupFieldsInput
}

input CardFieldUpdateWithoutFieldDataInput {
  order: Int
  cards: CardUpdateManyWithoutFieldsInput
  groups: FieldUpdateManyWithoutGroupFieldsInput
}

input CardFieldUpdateWithoutGroupsDataInput {
  order: Int
  field: FieldUpdateOneWithoutCardFieldInput
  cards: CardUpdateManyWithoutFieldsInput
}

input CardFieldUpdateWithWhereUniqueWithoutCardsInput {
  where: CardFieldWhereUniqueInput!
  data: CardFieldUpdateWithoutCardsDataInput!
}

input CardFieldUpdateWithWhereUniqueWithoutFieldInput {
  where: CardFieldWhereUniqueInput!
  data: CardFieldUpdateWithoutFieldDataInput!
}

input CardFieldUpdateWithWhereUniqueWithoutGroupsInput {
  where: CardFieldWhereUniqueInput!
  data: CardFieldUpdateWithoutGroupsDataInput!
}

input CardFieldUpsertWithWhereUniqueWithoutCardsInput {
  where: CardFieldWhereUniqueInput!
  update: CardFieldUpdateWithoutCardsDataInput!
  create: CardFieldCreateWithoutCardsInput!
}

input CardFieldUpsertWithWhereUniqueWithoutFieldInput {
  where: CardFieldWhereUniqueInput!
  update: CardFieldUpdateWithoutFieldDataInput!
  create: CardFieldCreateWithoutFieldInput!
}

input CardFieldUpsertWithWhereUniqueWithoutGroupsInput {
  where: CardFieldWhereUniqueInput!
  update: CardFieldUpdateWithoutGroupsDataInput!
  create: CardFieldCreateWithoutGroupsInput!
}

input CardFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  field: FieldWhereInput
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  groups_every: FieldWhereInput
  groups_some: FieldWhereInput
  groups_none: FieldWhereInput
  AND: [CardFieldWhereInput!]
  OR: [CardFieldWhereInput!]
  NOT: [CardFieldWhereInput!]
}

input CardFieldWhereUniqueInput {
  id: ID
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  grid_ASC
  grid_DESC
}

type CardPreviousValues {
  id: ID!
  title: String
  grid: Int!
}

input CardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  grid: Int
  grid_not: Int
  grid_in: [Int!]
  grid_not_in: [Int!]
  grid_lt: Int
  grid_lte: Int
  grid_gt: Int
  grid_gte: Int
  AND: [CardScalarWhereInput!]
  OR: [CardScalarWhereInput!]
  NOT: [CardScalarWhereInput!]
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  NOT: [CardSubscriptionWhereInput!]
}

input CardUpdateInput {
  title: String
  grid: Int
  formCard: FormCardUpdateManyWithoutCardInput
  fields: CardFieldUpdateManyWithoutCardsInput
}

input CardUpdateManyDataInput {
  title: String
  grid: Int
}

input CardUpdateManyMutationInput {
  title: String
  grid: Int
}

input CardUpdateManyWithoutFieldsInput {
  create: [CardCreateWithoutFieldsInput!]
  delete: [CardWhereUniqueInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutFieldsInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutFieldsInput!]
  deleteMany: [CardScalarWhereInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
}

input CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput!
  data: CardUpdateManyDataInput!
}

input CardUpdateOneWithoutFormCardInput {
  create: CardCreateWithoutFormCardInput
  update: CardUpdateWithoutFormCardDataInput
  upsert: CardUpsertWithoutFormCardInput
  delete: Boolean
  disconnect: Boolean
  connect: CardWhereUniqueInput
}

input CardUpdateWithoutFieldsDataInput {
  title: String
  grid: Int
  formCard: FormCardUpdateManyWithoutCardInput
}

input CardUpdateWithoutFormCardDataInput {
  title: String
  grid: Int
  fields: CardFieldUpdateManyWithoutCardsInput
}

input CardUpdateWithWhereUniqueWithoutFieldsInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutFieldsDataInput!
}

input CardUpsertWithoutFormCardInput {
  update: CardUpdateWithoutFormCardDataInput!
  create: CardCreateWithoutFormCardInput!
}

input CardUpsertWithWhereUniqueWithoutFieldsInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutFieldsDataInput!
  create: CardCreateWithoutFieldsInput!
}

input CardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  grid: Int
  grid_not: Int
  grid_in: [Int!]
  grid_not_in: [Int!]
  grid_lt: Int
  grid_lte: Int
  grid_gt: Int
  grid_gte: Int
  formCard_every: FormCardWhereInput
  formCard_some: FormCardWhereInput
  formCard_none: FormCardWhereInput
  fields_every: CardFieldWhereInput
  fields_some: CardFieldWhereInput
  fields_none: CardFieldWhereInput
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
}

input CardWhereUniqueInput {
  id: ID
}

scalar DateTime

type Field {
  id: ID!
  grid: Int!
  type: FieldType!
  label: String!
  name: String
  rows: Int
  rowsMax: Int
  groupFields(where: CardFieldWhereInput, orderBy: CardFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardField!]
  value: String
  valueFrom: String
  options(where: FieldOptionWhereInput, orderBy: FieldOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldOption!]
  cardField(where: CardFieldWhereInput, orderBy: CardFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardField!]
}

type FieldConnection {
  pageInfo: PageInfo!
  edges: [FieldEdge]!
  aggregate: AggregateField!
}

input FieldCreateInput {
  id: ID
  grid: Int
  type: FieldType
  label: String!
  name: String
  rows: Int
  rowsMax: Int
  groupFields: CardFieldCreateManyWithoutGroupsInput
  value: String
  valueFrom: String
  options: FieldOptionCreateManyInput
  cardField: CardFieldCreateManyWithoutFieldInput
}

input FieldCreateManyWithoutGroupFieldsInput {
  create: [FieldCreateWithoutGroupFieldsInput!]
  connect: [FieldWhereUniqueInput!]
}

input FieldCreateOneWithoutCardFieldInput {
  create: FieldCreateWithoutCardFieldInput
  connect: FieldWhereUniqueInput
}

input FieldCreateWithoutCardFieldInput {
  id: ID
  grid: Int
  type: FieldType
  label: String!
  name: String
  rows: Int
  rowsMax: Int
  groupFields: CardFieldCreateManyWithoutGroupsInput
  value: String
  valueFrom: String
  options: FieldOptionCreateManyInput
}

input FieldCreateWithoutGroupFieldsInput {
  id: ID
  grid: Int
  type: FieldType
  label: String!
  name: String
  rows: Int
  rowsMax: Int
  value: String
  valueFrom: String
  options: FieldOptionCreateManyInput
  cardField: CardFieldCreateManyWithoutFieldInput
}

type FieldEdge {
  node: Field!
  cursor: String!
}

type FieldOption {
  id: ID!
  label: String!
  value: String!
}

type FieldOptionConnection {
  pageInfo: PageInfo!
  edges: [FieldOptionEdge]!
  aggregate: AggregateFieldOption!
}

input FieldOptionCreateInput {
  id: ID
  label: String!
  value: String!
}

input FieldOptionCreateManyInput {
  create: [FieldOptionCreateInput!]
  connect: [FieldOptionWhereUniqueInput!]
}

type FieldOptionEdge {
  node: FieldOption!
  cursor: String!
}

enum FieldOptionOrderByInput {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  value_ASC
  value_DESC
}

type FieldOptionPreviousValues {
  id: ID!
  label: String!
  value: String!
}

input FieldOptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [FieldOptionScalarWhereInput!]
  OR: [FieldOptionScalarWhereInput!]
  NOT: [FieldOptionScalarWhereInput!]
}

type FieldOptionSubscriptionPayload {
  mutation: MutationType!
  node: FieldOption
  updatedFields: [String!]
  previousValues: FieldOptionPreviousValues
}

input FieldOptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FieldOptionWhereInput
  AND: [FieldOptionSubscriptionWhereInput!]
  OR: [FieldOptionSubscriptionWhereInput!]
  NOT: [FieldOptionSubscriptionWhereInput!]
}

input FieldOptionUpdateDataInput {
  label: String
  value: String
}

input FieldOptionUpdateInput {
  label: String
  value: String
}

input FieldOptionUpdateManyDataInput {
  label: String
  value: String
}

input FieldOptionUpdateManyInput {
  create: [FieldOptionCreateInput!]
  update: [FieldOptionUpdateWithWhereUniqueNestedInput!]
  upsert: [FieldOptionUpsertWithWhereUniqueNestedInput!]
  delete: [FieldOptionWhereUniqueInput!]
  connect: [FieldOptionWhereUniqueInput!]
  set: [FieldOptionWhereUniqueInput!]
  disconnect: [FieldOptionWhereUniqueInput!]
  deleteMany: [FieldOptionScalarWhereInput!]
  updateMany: [FieldOptionUpdateManyWithWhereNestedInput!]
}

input FieldOptionUpdateManyMutationInput {
  label: String
  value: String
}

input FieldOptionUpdateManyWithWhereNestedInput {
  where: FieldOptionScalarWhereInput!
  data: FieldOptionUpdateManyDataInput!
}

input FieldOptionUpdateWithWhereUniqueNestedInput {
  where: FieldOptionWhereUniqueInput!
  data: FieldOptionUpdateDataInput!
}

input FieldOptionUpsertWithWhereUniqueNestedInput {
  where: FieldOptionWhereUniqueInput!
  update: FieldOptionUpdateDataInput!
  create: FieldOptionCreateInput!
}

input FieldOptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [FieldOptionWhereInput!]
  OR: [FieldOptionWhereInput!]
  NOT: [FieldOptionWhereInput!]
}

input FieldOptionWhereUniqueInput {
  id: ID
}

enum FieldOrderByInput {
  id_ASC
  id_DESC
  grid_ASC
  grid_DESC
  type_ASC
  type_DESC
  label_ASC
  label_DESC
  name_ASC
  name_DESC
  rows_ASC
  rows_DESC
  rowsMax_ASC
  rowsMax_DESC
  value_ASC
  value_DESC
  valueFrom_ASC
  valueFrom_DESC
}

type FieldPreviousValues {
  id: ID!
  grid: Int!
  type: FieldType!
  label: String!
  name: String
  rows: Int
  rowsMax: Int
  value: String
  valueFrom: String
}

input FieldScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  grid: Int
  grid_not: Int
  grid_in: [Int!]
  grid_not_in: [Int!]
  grid_lt: Int
  grid_lte: Int
  grid_gt: Int
  grid_gte: Int
  type: FieldType
  type_not: FieldType
  type_in: [FieldType!]
  type_not_in: [FieldType!]
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rows: Int
  rows_not: Int
  rows_in: [Int!]
  rows_not_in: [Int!]
  rows_lt: Int
  rows_lte: Int
  rows_gt: Int
  rows_gte: Int
  rowsMax: Int
  rowsMax_not: Int
  rowsMax_in: [Int!]
  rowsMax_not_in: [Int!]
  rowsMax_lt: Int
  rowsMax_lte: Int
  rowsMax_gt: Int
  rowsMax_gte: Int
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  valueFrom: String
  valueFrom_not: String
  valueFrom_in: [String!]
  valueFrom_not_in: [String!]
  valueFrom_lt: String
  valueFrom_lte: String
  valueFrom_gt: String
  valueFrom_gte: String
  valueFrom_contains: String
  valueFrom_not_contains: String
  valueFrom_starts_with: String
  valueFrom_not_starts_with: String
  valueFrom_ends_with: String
  valueFrom_not_ends_with: String
  AND: [FieldScalarWhereInput!]
  OR: [FieldScalarWhereInput!]
  NOT: [FieldScalarWhereInput!]
}

type FieldSubscriptionPayload {
  mutation: MutationType!
  node: Field
  updatedFields: [String!]
  previousValues: FieldPreviousValues
}

input FieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FieldWhereInput
  AND: [FieldSubscriptionWhereInput!]
  OR: [FieldSubscriptionWhereInput!]
  NOT: [FieldSubscriptionWhereInput!]
}

enum FieldType {
  InfoField
  TextField
  TextAreaField
  SelectField
  SwitchField
  FileField
  DateTimeField
  GroupField
}

input FieldUpdateInput {
  grid: Int
  type: FieldType
  label: String
  name: String
  rows: Int
  rowsMax: Int
  groupFields: CardFieldUpdateManyWithoutGroupsInput
  value: String
  valueFrom: String
  options: FieldOptionUpdateManyInput
  cardField: CardFieldUpdateManyWithoutFieldInput
}

input FieldUpdateManyDataInput {
  grid: Int
  type: FieldType
  label: String
  name: String
  rows: Int
  rowsMax: Int
  value: String
  valueFrom: String
}

input FieldUpdateManyMutationInput {
  grid: Int
  type: FieldType
  label: String
  name: String
  rows: Int
  rowsMax: Int
  value: String
  valueFrom: String
}

input FieldUpdateManyWithoutGroupFieldsInput {
  create: [FieldCreateWithoutGroupFieldsInput!]
  delete: [FieldWhereUniqueInput!]
  connect: [FieldWhereUniqueInput!]
  set: [FieldWhereUniqueInput!]
  disconnect: [FieldWhereUniqueInput!]
  update: [FieldUpdateWithWhereUniqueWithoutGroupFieldsInput!]
  upsert: [FieldUpsertWithWhereUniqueWithoutGroupFieldsInput!]
  deleteMany: [FieldScalarWhereInput!]
  updateMany: [FieldUpdateManyWithWhereNestedInput!]
}

input FieldUpdateManyWithWhereNestedInput {
  where: FieldScalarWhereInput!
  data: FieldUpdateManyDataInput!
}

input FieldUpdateOneWithoutCardFieldInput {
  create: FieldCreateWithoutCardFieldInput
  update: FieldUpdateWithoutCardFieldDataInput
  upsert: FieldUpsertWithoutCardFieldInput
  delete: Boolean
  disconnect: Boolean
  connect: FieldWhereUniqueInput
}

input FieldUpdateWithoutCardFieldDataInput {
  grid: Int
  type: FieldType
  label: String
  name: String
  rows: Int
  rowsMax: Int
  groupFields: CardFieldUpdateManyWithoutGroupsInput
  value: String
  valueFrom: String
  options: FieldOptionUpdateManyInput
}

input FieldUpdateWithoutGroupFieldsDataInput {
  grid: Int
  type: FieldType
  label: String
  name: String
  rows: Int
  rowsMax: Int
  value: String
  valueFrom: String
  options: FieldOptionUpdateManyInput
  cardField: CardFieldUpdateManyWithoutFieldInput
}

input FieldUpdateWithWhereUniqueWithoutGroupFieldsInput {
  where: FieldWhereUniqueInput!
  data: FieldUpdateWithoutGroupFieldsDataInput!
}

input FieldUpsertWithoutCardFieldInput {
  update: FieldUpdateWithoutCardFieldDataInput!
  create: FieldCreateWithoutCardFieldInput!
}

input FieldUpsertWithWhereUniqueWithoutGroupFieldsInput {
  where: FieldWhereUniqueInput!
  update: FieldUpdateWithoutGroupFieldsDataInput!
  create: FieldCreateWithoutGroupFieldsInput!
}

input FieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  grid: Int
  grid_not: Int
  grid_in: [Int!]
  grid_not_in: [Int!]
  grid_lt: Int
  grid_lte: Int
  grid_gt: Int
  grid_gte: Int
  type: FieldType
  type_not: FieldType
  type_in: [FieldType!]
  type_not_in: [FieldType!]
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rows: Int
  rows_not: Int
  rows_in: [Int!]
  rows_not_in: [Int!]
  rows_lt: Int
  rows_lte: Int
  rows_gt: Int
  rows_gte: Int
  rowsMax: Int
  rowsMax_not: Int
  rowsMax_in: [Int!]
  rowsMax_not_in: [Int!]
  rowsMax_lt: Int
  rowsMax_lte: Int
  rowsMax_gt: Int
  rowsMax_gte: Int
  groupFields_every: CardFieldWhereInput
  groupFields_some: CardFieldWhereInput
  groupFields_none: CardFieldWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  valueFrom: String
  valueFrom_not: String
  valueFrom_in: [String!]
  valueFrom_not_in: [String!]
  valueFrom_lt: String
  valueFrom_lte: String
  valueFrom_gt: String
  valueFrom_gte: String
  valueFrom_contains: String
  valueFrom_not_contains: String
  valueFrom_starts_with: String
  valueFrom_not_starts_with: String
  valueFrom_ends_with: String
  valueFrom_not_ends_with: String
  options_every: FieldOptionWhereInput
  options_some: FieldOptionWhereInput
  options_none: FieldOptionWhereInput
  cardField_every: CardFieldWhereInput
  cardField_some: CardFieldWhereInput
  cardField_none: CardFieldWhereInput
  AND: [FieldWhereInput!]
  OR: [FieldWhereInput!]
  NOT: [FieldWhereInput!]
}

input FieldWhereUniqueInput {
  id: ID
}

type Form {
  id: ID!
  cards(where: FormCardWhereInput, orderBy: FormCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FormCard!]
  title: String
  description: String
}

type FormCard {
  id: ID!
  order: Int!
  card: Card
  form: Form!
}

type FormCardConnection {
  pageInfo: PageInfo!
  edges: [FormCardEdge]!
  aggregate: AggregateFormCard!
}

input FormCardCreateInput {
  id: ID
  order: Int!
  card: CardCreateOneWithoutFormCardInput
  form: FormCreateOneWithoutCardsInput!
}

input FormCardCreateManyWithoutCardInput {
  create: [FormCardCreateWithoutCardInput!]
  connect: [FormCardWhereUniqueInput!]
}

input FormCardCreateManyWithoutFormInput {
  create: [FormCardCreateWithoutFormInput!]
  connect: [FormCardWhereUniqueInput!]
}

input FormCardCreateWithoutCardInput {
  id: ID
  order: Int!
  form: FormCreateOneWithoutCardsInput!
}

input FormCardCreateWithoutFormInput {
  id: ID
  order: Int!
  card: CardCreateOneWithoutFormCardInput
}

type FormCardEdge {
  node: FormCard!
  cursor: String!
}

enum FormCardOrderByInput {
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type FormCardPreviousValues {
  id: ID!
  order: Int!
}

input FormCardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [FormCardScalarWhereInput!]
  OR: [FormCardScalarWhereInput!]
  NOT: [FormCardScalarWhereInput!]
}

type FormCardSubscriptionPayload {
  mutation: MutationType!
  node: FormCard
  updatedFields: [String!]
  previousValues: FormCardPreviousValues
}

input FormCardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FormCardWhereInput
  AND: [FormCardSubscriptionWhereInput!]
  OR: [FormCardSubscriptionWhereInput!]
  NOT: [FormCardSubscriptionWhereInput!]
}

input FormCardUpdateInput {
  order: Int
  card: CardUpdateOneWithoutFormCardInput
  form: FormUpdateOneRequiredWithoutCardsInput
}

input FormCardUpdateManyDataInput {
  order: Int
}

input FormCardUpdateManyMutationInput {
  order: Int
}

input FormCardUpdateManyWithoutCardInput {
  create: [FormCardCreateWithoutCardInput!]
  delete: [FormCardWhereUniqueInput!]
  connect: [FormCardWhereUniqueInput!]
  set: [FormCardWhereUniqueInput!]
  disconnect: [FormCardWhereUniqueInput!]
  update: [FormCardUpdateWithWhereUniqueWithoutCardInput!]
  upsert: [FormCardUpsertWithWhereUniqueWithoutCardInput!]
  deleteMany: [FormCardScalarWhereInput!]
  updateMany: [FormCardUpdateManyWithWhereNestedInput!]
}

input FormCardUpdateManyWithoutFormInput {
  create: [FormCardCreateWithoutFormInput!]
  delete: [FormCardWhereUniqueInput!]
  connect: [FormCardWhereUniqueInput!]
  set: [FormCardWhereUniqueInput!]
  disconnect: [FormCardWhereUniqueInput!]
  update: [FormCardUpdateWithWhereUniqueWithoutFormInput!]
  upsert: [FormCardUpsertWithWhereUniqueWithoutFormInput!]
  deleteMany: [FormCardScalarWhereInput!]
  updateMany: [FormCardUpdateManyWithWhereNestedInput!]
}

input FormCardUpdateManyWithWhereNestedInput {
  where: FormCardScalarWhereInput!
  data: FormCardUpdateManyDataInput!
}

input FormCardUpdateWithoutCardDataInput {
  order: Int
  form: FormUpdateOneRequiredWithoutCardsInput
}

input FormCardUpdateWithoutFormDataInput {
  order: Int
  card: CardUpdateOneWithoutFormCardInput
}

input FormCardUpdateWithWhereUniqueWithoutCardInput {
  where: FormCardWhereUniqueInput!
  data: FormCardUpdateWithoutCardDataInput!
}

input FormCardUpdateWithWhereUniqueWithoutFormInput {
  where: FormCardWhereUniqueInput!
  data: FormCardUpdateWithoutFormDataInput!
}

input FormCardUpsertWithWhereUniqueWithoutCardInput {
  where: FormCardWhereUniqueInput!
  update: FormCardUpdateWithoutCardDataInput!
  create: FormCardCreateWithoutCardInput!
}

input FormCardUpsertWithWhereUniqueWithoutFormInput {
  where: FormCardWhereUniqueInput!
  update: FormCardUpdateWithoutFormDataInput!
  create: FormCardCreateWithoutFormInput!
}

input FormCardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  card: CardWhereInput
  form: FormWhereInput
  AND: [FormCardWhereInput!]
  OR: [FormCardWhereInput!]
  NOT: [FormCardWhereInput!]
}

input FormCardWhereUniqueInput {
  id: ID
}

type FormConnection {
  pageInfo: PageInfo!
  edges: [FormEdge]!
  aggregate: AggregateForm!
}

input FormCreateInput {
  id: ID
  cards: FormCardCreateManyWithoutFormInput
  title: String
  description: String
}

input FormCreateOneWithoutCardsInput {
  create: FormCreateWithoutCardsInput
  connect: FormWhereUniqueInput
}

input FormCreateWithoutCardsInput {
  id: ID
  title: String
  description: String
}

type FormEdge {
  node: Form!
  cursor: String!
}

enum FormOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type FormPreviousValues {
  id: ID!
  title: String
  description: String
}

type FormSubscriptionPayload {
  mutation: MutationType!
  node: Form
  updatedFields: [String!]
  previousValues: FormPreviousValues
}

input FormSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FormWhereInput
  AND: [FormSubscriptionWhereInput!]
  OR: [FormSubscriptionWhereInput!]
  NOT: [FormSubscriptionWhereInput!]
}

input FormUpdateInput {
  cards: FormCardUpdateManyWithoutFormInput
  title: String
  description: String
}

input FormUpdateManyMutationInput {
  title: String
  description: String
}

input FormUpdateOneRequiredWithoutCardsInput {
  create: FormCreateWithoutCardsInput
  update: FormUpdateWithoutCardsDataInput
  upsert: FormUpsertWithoutCardsInput
  connect: FormWhereUniqueInput
}

input FormUpdateWithoutCardsDataInput {
  title: String
  description: String
}

input FormUpsertWithoutCardsInput {
  update: FormUpdateWithoutCardsDataInput!
  create: FormCreateWithoutCardsInput!
}

input FormWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cards_every: FormCardWhereInput
  cards_some: FormCardWhereInput
  cards_none: FormCardWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [FormWhereInput!]
  OR: [FormWhereInput!]
  NOT: [FormWhereInput!]
}

input FormWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Mutation {
  createCard(data: CardCreateInput!): Card!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteManyCards(where: CardWhereInput): BatchPayload!
  createCardField(data: CardFieldCreateInput!): CardField!
  updateCardField(data: CardFieldUpdateInput!, where: CardFieldWhereUniqueInput!): CardField
  updateManyCardFields(data: CardFieldUpdateManyMutationInput!, where: CardFieldWhereInput): BatchPayload!
  upsertCardField(where: CardFieldWhereUniqueInput!, create: CardFieldCreateInput!, update: CardFieldUpdateInput!): CardField!
  deleteCardField(where: CardFieldWhereUniqueInput!): CardField
  deleteManyCardFields(where: CardFieldWhereInput): BatchPayload!
  createField(data: FieldCreateInput!): Field!
  updateField(data: FieldUpdateInput!, where: FieldWhereUniqueInput!): Field
  updateManyFields(data: FieldUpdateManyMutationInput!, where: FieldWhereInput): BatchPayload!
  upsertField(where: FieldWhereUniqueInput!, create: FieldCreateInput!, update: FieldUpdateInput!): Field!
  deleteField(where: FieldWhereUniqueInput!): Field
  deleteManyFields(where: FieldWhereInput): BatchPayload!
  createFieldOption(data: FieldOptionCreateInput!): FieldOption!
  updateFieldOption(data: FieldOptionUpdateInput!, where: FieldOptionWhereUniqueInput!): FieldOption
  updateManyFieldOptions(data: FieldOptionUpdateManyMutationInput!, where: FieldOptionWhereInput): BatchPayload!
  upsertFieldOption(where: FieldOptionWhereUniqueInput!, create: FieldOptionCreateInput!, update: FieldOptionUpdateInput!): FieldOption!
  deleteFieldOption(where: FieldOptionWhereUniqueInput!): FieldOption
  deleteManyFieldOptions(where: FieldOptionWhereInput): BatchPayload!
  createForm(data: FormCreateInput!): Form!
  updateForm(data: FormUpdateInput!, where: FormWhereUniqueInput!): Form
  updateManyForms(data: FormUpdateManyMutationInput!, where: FormWhereInput): BatchPayload!
  upsertForm(where: FormWhereUniqueInput!, create: FormCreateInput!, update: FormUpdateInput!): Form!
  deleteForm(where: FormWhereUniqueInput!): Form
  deleteManyForms(where: FormWhereInput): BatchPayload!
  createFormCard(data: FormCardCreateInput!): FormCard!
  updateFormCard(data: FormCardUpdateInput!, where: FormCardWhereUniqueInput!): FormCard
  updateManyFormCards(data: FormCardUpdateManyMutationInput!, where: FormCardWhereInput): BatchPayload!
  upsertFormCard(where: FormCardWhereUniqueInput!, create: FormCardCreateInput!, update: FormCardUpdateInput!): FormCard!
  deleteFormCard(where: FormCardWhereUniqueInput!): FormCard
  deleteManyFormCards(where: FormCardWhereInput): BatchPayload!
  createReport(data: ReportCreateInput!): Report!
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateManyReports(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  upsertReport(where: ReportWhereUniqueInput!, create: ReportCreateInput!, update: ReportUpdateInput!): Report!
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteManyReports(where: ReportWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  card(where: CardWhereUniqueInput!): Card
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  cardField(where: CardFieldWhereUniqueInput!): CardField
  cardFields(where: CardFieldWhereInput, orderBy: CardFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CardField]!
  cardFieldsConnection(where: CardFieldWhereInput, orderBy: CardFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardFieldConnection!
  field(where: FieldWhereUniqueInput!): Field
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Field]!
  fieldsConnection(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldConnection!
  fieldOption(where: FieldOptionWhereUniqueInput!): FieldOption
  fieldOptions(where: FieldOptionWhereInput, orderBy: FieldOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FieldOption]!
  fieldOptionsConnection(where: FieldOptionWhereInput, orderBy: FieldOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldOptionConnection!
  form(where: FormWhereUniqueInput!): Form
  forms(where: FormWhereInput, orderBy: FormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Form]!
  formsConnection(where: FormWhereInput, orderBy: FormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FormConnection!
  formCard(where: FormCardWhereUniqueInput!): FormCard
  formCards(where: FormCardWhereInput, orderBy: FormCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FormCard]!
  formCardsConnection(where: FormCardWhereInput, orderBy: FormCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FormCardConnection!
  report(where: ReportWhereUniqueInput!): Report
  reports(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Report]!
  reportsConnection(where: ReportWhereInput, orderBy: ReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReportConnection!
  node(id: ID!): Node
}

type Report {
  id: ID!
  claimId: ID!
  data: Json!
  status: ReportStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]!
  aggregate: AggregateReport!
}

input ReportCreateInput {
  id: ID
  claimId: ID!
  data: Json
  status: ReportStatus
}

type ReportEdge {
  node: Report!
  cursor: String!
}

enum ReportOrderByInput {
  id_ASC
  id_DESC
  claimId_ASC
  claimId_DESC
  data_ASC
  data_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReportPreviousValues {
  id: ID!
  claimId: ID!
  data: Json!
  status: ReportStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ReportStatus {
  REPORTING
  REPORTED
}

type ReportSubscriptionPayload {
  mutation: MutationType!
  node: Report
  updatedFields: [String!]
  previousValues: ReportPreviousValues
}

input ReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReportWhereInput
  AND: [ReportSubscriptionWhereInput!]
  OR: [ReportSubscriptionWhereInput!]
  NOT: [ReportSubscriptionWhereInput!]
}

input ReportUpdateInput {
  claimId: ID
  data: Json
  status: ReportStatus
}

input ReportUpdateManyMutationInput {
  claimId: ID
  data: Json
  status: ReportStatus
}

input ReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  claimId: ID
  claimId_not: ID
  claimId_in: [ID!]
  claimId_not_in: [ID!]
  claimId_lt: ID
  claimId_lte: ID
  claimId_gt: ID
  claimId_gte: ID
  claimId_contains: ID
  claimId_not_contains: ID
  claimId_starts_with: ID
  claimId_not_starts_with: ID
  claimId_ends_with: ID
  claimId_not_ends_with: ID
  status: ReportStatus
  status_not: ReportStatus
  status_in: [ReportStatus!]
  status_not_in: [ReportStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
}

input ReportWhereUniqueInput {
  id: ID
  claimId: ID
}

type Subscription {
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  cardField(where: CardFieldSubscriptionWhereInput): CardFieldSubscriptionPayload
  field(where: FieldSubscriptionWhereInput): FieldSubscriptionPayload
  fieldOption(where: FieldOptionSubscriptionWhereInput): FieldOptionSubscriptionPayload
  form(where: FormSubscriptionWhereInput): FormSubscriptionPayload
  formCard(where: FormCardSubscriptionWhereInput): FormCardSubscriptionPayload
  report(where: ReportSubscriptionWhereInput): ReportSubscriptionPayload
}
`
      }
    