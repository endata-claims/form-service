// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  card: (where?: CardWhereInput) => Promise<boolean>;
  cardField: (where?: CardFieldWhereInput) => Promise<boolean>;
  field: (where?: FieldWhereInput) => Promise<boolean>;
  fieldOption: (where?: FieldOptionWhereInput) => Promise<boolean>;
  form: (where?: FormWhereInput) => Promise<boolean>;
  formCard: (where?: FormCardWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  card: (where: CardWhereUniqueInput) => CardNullablePromise;
  cards: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Card>;
  cardsConnection: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardConnectionPromise;
  cardField: (where: CardFieldWhereUniqueInput) => CardFieldNullablePromise;
  cardFields: (args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CardField>;
  cardFieldsConnection: (args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardFieldConnectionPromise;
  field: (where: FieldWhereUniqueInput) => FieldNullablePromise;
  fields: (args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Field>;
  fieldsConnection: (args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FieldConnectionPromise;
  fieldOption: (
    where: FieldOptionWhereUniqueInput
  ) => FieldOptionNullablePromise;
  fieldOptions: (args?: {
    where?: FieldOptionWhereInput;
    orderBy?: FieldOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FieldOption>;
  fieldOptionsConnection: (args?: {
    where?: FieldOptionWhereInput;
    orderBy?: FieldOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FieldOptionConnectionPromise;
  form: (where: FormWhereUniqueInput) => FormNullablePromise;
  forms: (args?: {
    where?: FormWhereInput;
    orderBy?: FormOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Form>;
  formsConnection: (args?: {
    where?: FormWhereInput;
    orderBy?: FormOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FormConnectionPromise;
  formCard: (where: FormCardWhereUniqueInput) => FormCardNullablePromise;
  formCards: (args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FormCard>;
  formCardsConnection: (args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FormCardConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (args: {
    data: CardUpdateInput;
    where: CardWhereUniqueInput;
  }) => CardPromise;
  updateManyCards: (args: {
    data: CardUpdateManyMutationInput;
    where?: CardWhereInput;
  }) => BatchPayloadPromise;
  upsertCard: (args: {
    where: CardWhereUniqueInput;
    create: CardCreateInput;
    update: CardUpdateInput;
  }) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createCardField: (data: CardFieldCreateInput) => CardFieldPromise;
  updateCardField: (args: {
    data: CardFieldUpdateInput;
    where: CardFieldWhereUniqueInput;
  }) => CardFieldPromise;
  updateManyCardFields: (args: {
    data: CardFieldUpdateManyMutationInput;
    where?: CardFieldWhereInput;
  }) => BatchPayloadPromise;
  upsertCardField: (args: {
    where: CardFieldWhereUniqueInput;
    create: CardFieldCreateInput;
    update: CardFieldUpdateInput;
  }) => CardFieldPromise;
  deleteCardField: (where: CardFieldWhereUniqueInput) => CardFieldPromise;
  deleteManyCardFields: (where?: CardFieldWhereInput) => BatchPayloadPromise;
  createField: (data: FieldCreateInput) => FieldPromise;
  updateField: (args: {
    data: FieldUpdateInput;
    where: FieldWhereUniqueInput;
  }) => FieldPromise;
  updateManyFields: (args: {
    data: FieldUpdateManyMutationInput;
    where?: FieldWhereInput;
  }) => BatchPayloadPromise;
  upsertField: (args: {
    where: FieldWhereUniqueInput;
    create: FieldCreateInput;
    update: FieldUpdateInput;
  }) => FieldPromise;
  deleteField: (where: FieldWhereUniqueInput) => FieldPromise;
  deleteManyFields: (where?: FieldWhereInput) => BatchPayloadPromise;
  createFieldOption: (data: FieldOptionCreateInput) => FieldOptionPromise;
  updateFieldOption: (args: {
    data: FieldOptionUpdateInput;
    where: FieldOptionWhereUniqueInput;
  }) => FieldOptionPromise;
  updateManyFieldOptions: (args: {
    data: FieldOptionUpdateManyMutationInput;
    where?: FieldOptionWhereInput;
  }) => BatchPayloadPromise;
  upsertFieldOption: (args: {
    where: FieldOptionWhereUniqueInput;
    create: FieldOptionCreateInput;
    update: FieldOptionUpdateInput;
  }) => FieldOptionPromise;
  deleteFieldOption: (where: FieldOptionWhereUniqueInput) => FieldOptionPromise;
  deleteManyFieldOptions: (
    where?: FieldOptionWhereInput
  ) => BatchPayloadPromise;
  createForm: (data: FormCreateInput) => FormPromise;
  updateForm: (args: {
    data: FormUpdateInput;
    where: FormWhereUniqueInput;
  }) => FormPromise;
  updateManyForms: (args: {
    data: FormUpdateManyMutationInput;
    where?: FormWhereInput;
  }) => BatchPayloadPromise;
  upsertForm: (args: {
    where: FormWhereUniqueInput;
    create: FormCreateInput;
    update: FormUpdateInput;
  }) => FormPromise;
  deleteForm: (where: FormWhereUniqueInput) => FormPromise;
  deleteManyForms: (where?: FormWhereInput) => BatchPayloadPromise;
  createFormCard: (data: FormCardCreateInput) => FormCardPromise;
  updateFormCard: (args: {
    data: FormCardUpdateInput;
    where: FormCardWhereUniqueInput;
  }) => FormCardPromise;
  updateManyFormCards: (args: {
    data: FormCardUpdateManyMutationInput;
    where?: FormCardWhereInput;
  }) => BatchPayloadPromise;
  upsertFormCard: (args: {
    where: FormCardWhereUniqueInput;
    create: FormCardCreateInput;
    update: FormCardUpdateInput;
  }) => FormCardPromise;
  deleteFormCard: (where: FormCardWhereUniqueInput) => FormCardPromise;
  deleteManyFormCards: (where?: FormCardWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  cardField: (
    where?: CardFieldSubscriptionWhereInput
  ) => CardFieldSubscriptionPayloadSubscription;
  field: (
    where?: FieldSubscriptionWhereInput
  ) => FieldSubscriptionPayloadSubscription;
  fieldOption: (
    where?: FieldOptionSubscriptionWhereInput
  ) => FieldOptionSubscriptionPayloadSubscription;
  form: (
    where?: FormSubscriptionWhereInput
  ) => FormSubscriptionPayloadSubscription;
  formCard: (
    where?: FormCardSubscriptionWhereInput
  ) => FormCardSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FieldType =
  | "InfoField"
  | "TextField"
  | "TextAreaField"
  | "SelectField"
  | "SwitchField"
  | "FileField"
  | "DateTimeField"
  | "GroupField";

export type FormCardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "order_ASC"
  | "order_DESC";

export type CardFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "order_ASC"
  | "order_DESC";

export type FieldOptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "value_ASC"
  | "value_DESC";

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "grid_ASC"
  | "grid_DESC";

export type FieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "grid_ASC"
  | "grid_DESC"
  | "type_ASC"
  | "type_DESC"
  | "label_ASC"
  | "label_DESC"
  | "name_ASC"
  | "name_DESC"
  | "rows_ASC"
  | "rows_DESC"
  | "rowsMax_ASC"
  | "rowsMax_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueFrom_ASC"
  | "valueFrom_DESC";

export type FormOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type ReportStatus = "REPORTING" | "REPORTED";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "claimId_ASC"
  | "claimId_DESC"
  | "data_ASC"
  | "data_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FormCardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  card?: Maybe<CardWhereInput>;
  form?: Maybe<FormWhereInput>;
  AND?: Maybe<FormCardWhereInput[] | FormCardWhereInput>;
  OR?: Maybe<FormCardWhereInput[] | FormCardWhereInput>;
  NOT?: Maybe<FormCardWhereInput[] | FormCardWhereInput>;
}

export interface CardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  grid?: Maybe<Int>;
  grid_not?: Maybe<Int>;
  grid_in?: Maybe<Int[] | Int>;
  grid_not_in?: Maybe<Int[] | Int>;
  grid_lt?: Maybe<Int>;
  grid_lte?: Maybe<Int>;
  grid_gt?: Maybe<Int>;
  grid_gte?: Maybe<Int>;
  formCard_every?: Maybe<FormCardWhereInput>;
  formCard_some?: Maybe<FormCardWhereInput>;
  formCard_none?: Maybe<FormCardWhereInput>;
  fields_every?: Maybe<CardFieldWhereInput>;
  fields_some?: Maybe<CardFieldWhereInput>;
  fields_none?: Maybe<CardFieldWhereInput>;
  AND?: Maybe<CardWhereInput[] | CardWhereInput>;
  OR?: Maybe<CardWhereInput[] | CardWhereInput>;
  NOT?: Maybe<CardWhereInput[] | CardWhereInput>;
}

export interface CardFieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  field?: Maybe<FieldWhereInput>;
  cards_every?: Maybe<CardWhereInput>;
  cards_some?: Maybe<CardWhereInput>;
  cards_none?: Maybe<CardWhereInput>;
  groups_every?: Maybe<FieldWhereInput>;
  groups_some?: Maybe<FieldWhereInput>;
  groups_none?: Maybe<FieldWhereInput>;
  AND?: Maybe<CardFieldWhereInput[] | CardFieldWhereInput>;
  OR?: Maybe<CardFieldWhereInput[] | CardFieldWhereInput>;
  NOT?: Maybe<CardFieldWhereInput[] | CardFieldWhereInput>;
}

export interface FieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  grid?: Maybe<Int>;
  grid_not?: Maybe<Int>;
  grid_in?: Maybe<Int[] | Int>;
  grid_not_in?: Maybe<Int[] | Int>;
  grid_lt?: Maybe<Int>;
  grid_lte?: Maybe<Int>;
  grid_gt?: Maybe<Int>;
  grid_gte?: Maybe<Int>;
  type?: Maybe<FieldType>;
  type_not?: Maybe<FieldType>;
  type_in?: Maybe<FieldType[] | FieldType>;
  type_not_in?: Maybe<FieldType[] | FieldType>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  rows?: Maybe<Int>;
  rows_not?: Maybe<Int>;
  rows_in?: Maybe<Int[] | Int>;
  rows_not_in?: Maybe<Int[] | Int>;
  rows_lt?: Maybe<Int>;
  rows_lte?: Maybe<Int>;
  rows_gt?: Maybe<Int>;
  rows_gte?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  rowsMax_not?: Maybe<Int>;
  rowsMax_in?: Maybe<Int[] | Int>;
  rowsMax_not_in?: Maybe<Int[] | Int>;
  rowsMax_lt?: Maybe<Int>;
  rowsMax_lte?: Maybe<Int>;
  rowsMax_gt?: Maybe<Int>;
  rowsMax_gte?: Maybe<Int>;
  groupFields_every?: Maybe<CardFieldWhereInput>;
  groupFields_some?: Maybe<CardFieldWhereInput>;
  groupFields_none?: Maybe<CardFieldWhereInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  valueFrom?: Maybe<String>;
  valueFrom_not?: Maybe<String>;
  valueFrom_in?: Maybe<String[] | String>;
  valueFrom_not_in?: Maybe<String[] | String>;
  valueFrom_lt?: Maybe<String>;
  valueFrom_lte?: Maybe<String>;
  valueFrom_gt?: Maybe<String>;
  valueFrom_gte?: Maybe<String>;
  valueFrom_contains?: Maybe<String>;
  valueFrom_not_contains?: Maybe<String>;
  valueFrom_starts_with?: Maybe<String>;
  valueFrom_not_starts_with?: Maybe<String>;
  valueFrom_ends_with?: Maybe<String>;
  valueFrom_not_ends_with?: Maybe<String>;
  options_every?: Maybe<FieldOptionWhereInput>;
  options_some?: Maybe<FieldOptionWhereInput>;
  options_none?: Maybe<FieldOptionWhereInput>;
  cardField_every?: Maybe<CardFieldWhereInput>;
  cardField_some?: Maybe<CardFieldWhereInput>;
  cardField_none?: Maybe<CardFieldWhereInput>;
  AND?: Maybe<FieldWhereInput[] | FieldWhereInput>;
  OR?: Maybe<FieldWhereInput[] | FieldWhereInput>;
  NOT?: Maybe<FieldWhereInput[] | FieldWhereInput>;
}

export interface FieldOptionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<FieldOptionWhereInput[] | FieldOptionWhereInput>;
  OR?: Maybe<FieldOptionWhereInput[] | FieldOptionWhereInput>;
  NOT?: Maybe<FieldOptionWhereInput[] | FieldOptionWhereInput>;
}

export interface FormWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cards_every?: Maybe<FormCardWhereInput>;
  cards_some?: Maybe<FormCardWhereInput>;
  cards_none?: Maybe<FormCardWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<FormWhereInput[] | FormWhereInput>;
  OR?: Maybe<FormWhereInput[] | FormWhereInput>;
  NOT?: Maybe<FormWhereInput[] | FormWhereInput>;
}

export type CardFieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FieldOptionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FormWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FormCardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  claimId?: Maybe<ID_Input>;
}>;

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  claimId?: Maybe<ID_Input>;
  claimId_not?: Maybe<ID_Input>;
  claimId_in?: Maybe<ID_Input[] | ID_Input>;
  claimId_not_in?: Maybe<ID_Input[] | ID_Input>;
  claimId_lt?: Maybe<ID_Input>;
  claimId_lte?: Maybe<ID_Input>;
  claimId_gt?: Maybe<ID_Input>;
  claimId_gte?: Maybe<ID_Input>;
  claimId_contains?: Maybe<ID_Input>;
  claimId_not_contains?: Maybe<ID_Input>;
  claimId_starts_with?: Maybe<ID_Input>;
  claimId_not_starts_with?: Maybe<ID_Input>;
  claimId_ends_with?: Maybe<ID_Input>;
  claimId_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<ReportStatus>;
  status_not?: Maybe<ReportStatus>;
  status_in?: Maybe<ReportStatus[] | ReportStatus>;
  status_not_in?: Maybe<ReportStatus[] | ReportStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  OR?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  NOT?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export interface CardCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  grid?: Maybe<Int>;
  formCard?: Maybe<FormCardCreateManyWithoutCardInput>;
  fields?: Maybe<CardFieldCreateManyWithoutCardsInput>;
}

export interface FormCardCreateManyWithoutCardInput {
  create?: Maybe<
    FormCardCreateWithoutCardInput[] | FormCardCreateWithoutCardInput
  >;
  connect?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
}

export interface FormCardCreateWithoutCardInput {
  id?: Maybe<ID_Input>;
  order: Int;
  form: FormCreateOneWithoutCardsInput;
}

export interface FormCreateOneWithoutCardsInput {
  create?: Maybe<FormCreateWithoutCardsInput>;
  connect?: Maybe<FormWhereUniqueInput>;
}

export interface FormCreateWithoutCardsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CardFieldCreateManyWithoutCardsInput {
  create?: Maybe<
    CardFieldCreateWithoutCardsInput[] | CardFieldCreateWithoutCardsInput
  >;
  connect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
}

export interface CardFieldCreateWithoutCardsInput {
  id?: Maybe<ID_Input>;
  order: Int;
  field?: Maybe<FieldCreateOneWithoutCardFieldInput>;
  groups?: Maybe<FieldCreateManyWithoutGroupFieldsInput>;
}

export interface FieldCreateOneWithoutCardFieldInput {
  create?: Maybe<FieldCreateWithoutCardFieldInput>;
  connect?: Maybe<FieldWhereUniqueInput>;
}

export interface FieldCreateWithoutCardFieldInput {
  id?: Maybe<ID_Input>;
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label: String;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  groupFields?: Maybe<CardFieldCreateManyWithoutGroupsInput>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
  options?: Maybe<FieldOptionCreateManyInput>;
}

export interface CardFieldCreateManyWithoutGroupsInput {
  create?: Maybe<
    CardFieldCreateWithoutGroupsInput[] | CardFieldCreateWithoutGroupsInput
  >;
  connect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
}

export interface CardFieldCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  order: Int;
  field?: Maybe<FieldCreateOneWithoutCardFieldInput>;
  cards?: Maybe<CardCreateManyWithoutFieldsInput>;
}

export interface CardCreateManyWithoutFieldsInput {
  create?: Maybe<CardCreateWithoutFieldsInput[] | CardCreateWithoutFieldsInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
}

export interface CardCreateWithoutFieldsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  grid?: Maybe<Int>;
  formCard?: Maybe<FormCardCreateManyWithoutCardInput>;
}

export interface FieldOptionCreateManyInput {
  create?: Maybe<FieldOptionCreateInput[] | FieldOptionCreateInput>;
  connect?: Maybe<FieldOptionWhereUniqueInput[] | FieldOptionWhereUniqueInput>;
}

export interface FieldOptionCreateInput {
  id?: Maybe<ID_Input>;
  label: String;
  value: String;
}

export interface FieldCreateManyWithoutGroupFieldsInput {
  create?: Maybe<
    FieldCreateWithoutGroupFieldsInput[] | FieldCreateWithoutGroupFieldsInput
  >;
  connect?: Maybe<FieldWhereUniqueInput[] | FieldWhereUniqueInput>;
}

export interface FieldCreateWithoutGroupFieldsInput {
  id?: Maybe<ID_Input>;
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label: String;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
  options?: Maybe<FieldOptionCreateManyInput>;
  cardField?: Maybe<CardFieldCreateManyWithoutFieldInput>;
}

export interface CardFieldCreateManyWithoutFieldInput {
  create?: Maybe<
    CardFieldCreateWithoutFieldInput[] | CardFieldCreateWithoutFieldInput
  >;
  connect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
}

export interface CardFieldCreateWithoutFieldInput {
  id?: Maybe<ID_Input>;
  order: Int;
  cards?: Maybe<CardCreateManyWithoutFieldsInput>;
  groups?: Maybe<FieldCreateManyWithoutGroupFieldsInput>;
}

export interface CardUpdateInput {
  title?: Maybe<String>;
  grid?: Maybe<Int>;
  formCard?: Maybe<FormCardUpdateManyWithoutCardInput>;
  fields?: Maybe<CardFieldUpdateManyWithoutCardsInput>;
}

export interface FormCardUpdateManyWithoutCardInput {
  create?: Maybe<
    FormCardCreateWithoutCardInput[] | FormCardCreateWithoutCardInput
  >;
  delete?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  connect?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  set?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  disconnect?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  update?: Maybe<
    | FormCardUpdateWithWhereUniqueWithoutCardInput[]
    | FormCardUpdateWithWhereUniqueWithoutCardInput
  >;
  upsert?: Maybe<
    | FormCardUpsertWithWhereUniqueWithoutCardInput[]
    | FormCardUpsertWithWhereUniqueWithoutCardInput
  >;
  deleteMany?: Maybe<FormCardScalarWhereInput[] | FormCardScalarWhereInput>;
  updateMany?: Maybe<
    | FormCardUpdateManyWithWhereNestedInput[]
    | FormCardUpdateManyWithWhereNestedInput
  >;
}

export interface FormCardUpdateWithWhereUniqueWithoutCardInput {
  where: FormCardWhereUniqueInput;
  data: FormCardUpdateWithoutCardDataInput;
}

export interface FormCardUpdateWithoutCardDataInput {
  order?: Maybe<Int>;
  form?: Maybe<FormUpdateOneRequiredWithoutCardsInput>;
}

export interface FormUpdateOneRequiredWithoutCardsInput {
  create?: Maybe<FormCreateWithoutCardsInput>;
  update?: Maybe<FormUpdateWithoutCardsDataInput>;
  upsert?: Maybe<FormUpsertWithoutCardsInput>;
  connect?: Maybe<FormWhereUniqueInput>;
}

export interface FormUpdateWithoutCardsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface FormUpsertWithoutCardsInput {
  update: FormUpdateWithoutCardsDataInput;
  create: FormCreateWithoutCardsInput;
}

export interface FormCardUpsertWithWhereUniqueWithoutCardInput {
  where: FormCardWhereUniqueInput;
  update: FormCardUpdateWithoutCardDataInput;
  create: FormCardCreateWithoutCardInput;
}

export interface FormCardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<FormCardScalarWhereInput[] | FormCardScalarWhereInput>;
  OR?: Maybe<FormCardScalarWhereInput[] | FormCardScalarWhereInput>;
  NOT?: Maybe<FormCardScalarWhereInput[] | FormCardScalarWhereInput>;
}

export interface FormCardUpdateManyWithWhereNestedInput {
  where: FormCardScalarWhereInput;
  data: FormCardUpdateManyDataInput;
}

export interface FormCardUpdateManyDataInput {
  order?: Maybe<Int>;
}

export interface CardFieldUpdateManyWithoutCardsInput {
  create?: Maybe<
    CardFieldCreateWithoutCardsInput[] | CardFieldCreateWithoutCardsInput
  >;
  delete?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  connect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  set?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  disconnect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  update?: Maybe<
    | CardFieldUpdateWithWhereUniqueWithoutCardsInput[]
    | CardFieldUpdateWithWhereUniqueWithoutCardsInput
  >;
  upsert?: Maybe<
    | CardFieldUpsertWithWhereUniqueWithoutCardsInput[]
    | CardFieldUpsertWithWhereUniqueWithoutCardsInput
  >;
  deleteMany?: Maybe<CardFieldScalarWhereInput[] | CardFieldScalarWhereInput>;
  updateMany?: Maybe<
    | CardFieldUpdateManyWithWhereNestedInput[]
    | CardFieldUpdateManyWithWhereNestedInput
  >;
}

export interface CardFieldUpdateWithWhereUniqueWithoutCardsInput {
  where: CardFieldWhereUniqueInput;
  data: CardFieldUpdateWithoutCardsDataInput;
}

export interface CardFieldUpdateWithoutCardsDataInput {
  order?: Maybe<Int>;
  field?: Maybe<FieldUpdateOneWithoutCardFieldInput>;
  groups?: Maybe<FieldUpdateManyWithoutGroupFieldsInput>;
}

export interface FieldUpdateOneWithoutCardFieldInput {
  create?: Maybe<FieldCreateWithoutCardFieldInput>;
  update?: Maybe<FieldUpdateWithoutCardFieldDataInput>;
  upsert?: Maybe<FieldUpsertWithoutCardFieldInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FieldWhereUniqueInput>;
}

export interface FieldUpdateWithoutCardFieldDataInput {
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label?: Maybe<String>;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  groupFields?: Maybe<CardFieldUpdateManyWithoutGroupsInput>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
  options?: Maybe<FieldOptionUpdateManyInput>;
}

export interface CardFieldUpdateManyWithoutGroupsInput {
  create?: Maybe<
    CardFieldCreateWithoutGroupsInput[] | CardFieldCreateWithoutGroupsInput
  >;
  delete?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  connect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  set?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  disconnect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  update?: Maybe<
    | CardFieldUpdateWithWhereUniqueWithoutGroupsInput[]
    | CardFieldUpdateWithWhereUniqueWithoutGroupsInput
  >;
  upsert?: Maybe<
    | CardFieldUpsertWithWhereUniqueWithoutGroupsInput[]
    | CardFieldUpsertWithWhereUniqueWithoutGroupsInput
  >;
  deleteMany?: Maybe<CardFieldScalarWhereInput[] | CardFieldScalarWhereInput>;
  updateMany?: Maybe<
    | CardFieldUpdateManyWithWhereNestedInput[]
    | CardFieldUpdateManyWithWhereNestedInput
  >;
}

export interface CardFieldUpdateWithWhereUniqueWithoutGroupsInput {
  where: CardFieldWhereUniqueInput;
  data: CardFieldUpdateWithoutGroupsDataInput;
}

export interface CardFieldUpdateWithoutGroupsDataInput {
  order?: Maybe<Int>;
  field?: Maybe<FieldUpdateOneWithoutCardFieldInput>;
  cards?: Maybe<CardUpdateManyWithoutFieldsInput>;
}

export interface CardUpdateManyWithoutFieldsInput {
  create?: Maybe<CardCreateWithoutFieldsInput[] | CardCreateWithoutFieldsInput>;
  delete?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  set?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  disconnect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  update?: Maybe<
    | CardUpdateWithWhereUniqueWithoutFieldsInput[]
    | CardUpdateWithWhereUniqueWithoutFieldsInput
  >;
  upsert?: Maybe<
    | CardUpsertWithWhereUniqueWithoutFieldsInput[]
    | CardUpsertWithWhereUniqueWithoutFieldsInput
  >;
  deleteMany?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  updateMany?: Maybe<
    CardUpdateManyWithWhereNestedInput[] | CardUpdateManyWithWhereNestedInput
  >;
}

export interface CardUpdateWithWhereUniqueWithoutFieldsInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutFieldsDataInput;
}

export interface CardUpdateWithoutFieldsDataInput {
  title?: Maybe<String>;
  grid?: Maybe<Int>;
  formCard?: Maybe<FormCardUpdateManyWithoutCardInput>;
}

export interface CardUpsertWithWhereUniqueWithoutFieldsInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutFieldsDataInput;
  create: CardCreateWithoutFieldsInput;
}

export interface CardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  grid?: Maybe<Int>;
  grid_not?: Maybe<Int>;
  grid_in?: Maybe<Int[] | Int>;
  grid_not_in?: Maybe<Int[] | Int>;
  grid_lt?: Maybe<Int>;
  grid_lte?: Maybe<Int>;
  grid_gt?: Maybe<Int>;
  grid_gte?: Maybe<Int>;
  AND?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  OR?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  NOT?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
}

export interface CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput;
  data: CardUpdateManyDataInput;
}

export interface CardUpdateManyDataInput {
  title?: Maybe<String>;
  grid?: Maybe<Int>;
}

export interface CardFieldUpsertWithWhereUniqueWithoutGroupsInput {
  where: CardFieldWhereUniqueInput;
  update: CardFieldUpdateWithoutGroupsDataInput;
  create: CardFieldCreateWithoutGroupsInput;
}

export interface CardFieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<CardFieldScalarWhereInput[] | CardFieldScalarWhereInput>;
  OR?: Maybe<CardFieldScalarWhereInput[] | CardFieldScalarWhereInput>;
  NOT?: Maybe<CardFieldScalarWhereInput[] | CardFieldScalarWhereInput>;
}

export interface CardFieldUpdateManyWithWhereNestedInput {
  where: CardFieldScalarWhereInput;
  data: CardFieldUpdateManyDataInput;
}

export interface CardFieldUpdateManyDataInput {
  order?: Maybe<Int>;
}

export interface FieldOptionUpdateManyInput {
  create?: Maybe<FieldOptionCreateInput[] | FieldOptionCreateInput>;
  update?: Maybe<
    | FieldOptionUpdateWithWhereUniqueNestedInput[]
    | FieldOptionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | FieldOptionUpsertWithWhereUniqueNestedInput[]
    | FieldOptionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<FieldOptionWhereUniqueInput[] | FieldOptionWhereUniqueInput>;
  connect?: Maybe<FieldOptionWhereUniqueInput[] | FieldOptionWhereUniqueInput>;
  set?: Maybe<FieldOptionWhereUniqueInput[] | FieldOptionWhereUniqueInput>;
  disconnect?: Maybe<
    FieldOptionWhereUniqueInput[] | FieldOptionWhereUniqueInput
  >;
  deleteMany?: Maybe<
    FieldOptionScalarWhereInput[] | FieldOptionScalarWhereInput
  >;
  updateMany?: Maybe<
    | FieldOptionUpdateManyWithWhereNestedInput[]
    | FieldOptionUpdateManyWithWhereNestedInput
  >;
}

export interface FieldOptionUpdateWithWhereUniqueNestedInput {
  where: FieldOptionWhereUniqueInput;
  data: FieldOptionUpdateDataInput;
}

export interface FieldOptionUpdateDataInput {
  label?: Maybe<String>;
  value?: Maybe<String>;
}

export interface FieldOptionUpsertWithWhereUniqueNestedInput {
  where: FieldOptionWhereUniqueInput;
  update: FieldOptionUpdateDataInput;
  create: FieldOptionCreateInput;
}

export interface FieldOptionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<FieldOptionScalarWhereInput[] | FieldOptionScalarWhereInput>;
  OR?: Maybe<FieldOptionScalarWhereInput[] | FieldOptionScalarWhereInput>;
  NOT?: Maybe<FieldOptionScalarWhereInput[] | FieldOptionScalarWhereInput>;
}

export interface FieldOptionUpdateManyWithWhereNestedInput {
  where: FieldOptionScalarWhereInput;
  data: FieldOptionUpdateManyDataInput;
}

export interface FieldOptionUpdateManyDataInput {
  label?: Maybe<String>;
  value?: Maybe<String>;
}

export interface FieldUpsertWithoutCardFieldInput {
  update: FieldUpdateWithoutCardFieldDataInput;
  create: FieldCreateWithoutCardFieldInput;
}

export interface FieldUpdateManyWithoutGroupFieldsInput {
  create?: Maybe<
    FieldCreateWithoutGroupFieldsInput[] | FieldCreateWithoutGroupFieldsInput
  >;
  delete?: Maybe<FieldWhereUniqueInput[] | FieldWhereUniqueInput>;
  connect?: Maybe<FieldWhereUniqueInput[] | FieldWhereUniqueInput>;
  set?: Maybe<FieldWhereUniqueInput[] | FieldWhereUniqueInput>;
  disconnect?: Maybe<FieldWhereUniqueInput[] | FieldWhereUniqueInput>;
  update?: Maybe<
    | FieldUpdateWithWhereUniqueWithoutGroupFieldsInput[]
    | FieldUpdateWithWhereUniqueWithoutGroupFieldsInput
  >;
  upsert?: Maybe<
    | FieldUpsertWithWhereUniqueWithoutGroupFieldsInput[]
    | FieldUpsertWithWhereUniqueWithoutGroupFieldsInput
  >;
  deleteMany?: Maybe<FieldScalarWhereInput[] | FieldScalarWhereInput>;
  updateMany?: Maybe<
    FieldUpdateManyWithWhereNestedInput[] | FieldUpdateManyWithWhereNestedInput
  >;
}

export interface FieldUpdateWithWhereUniqueWithoutGroupFieldsInput {
  where: FieldWhereUniqueInput;
  data: FieldUpdateWithoutGroupFieldsDataInput;
}

export interface FieldUpdateWithoutGroupFieldsDataInput {
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label?: Maybe<String>;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
  options?: Maybe<FieldOptionUpdateManyInput>;
  cardField?: Maybe<CardFieldUpdateManyWithoutFieldInput>;
}

export interface CardFieldUpdateManyWithoutFieldInput {
  create?: Maybe<
    CardFieldCreateWithoutFieldInput[] | CardFieldCreateWithoutFieldInput
  >;
  delete?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  connect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  set?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  disconnect?: Maybe<CardFieldWhereUniqueInput[] | CardFieldWhereUniqueInput>;
  update?: Maybe<
    | CardFieldUpdateWithWhereUniqueWithoutFieldInput[]
    | CardFieldUpdateWithWhereUniqueWithoutFieldInput
  >;
  upsert?: Maybe<
    | CardFieldUpsertWithWhereUniqueWithoutFieldInput[]
    | CardFieldUpsertWithWhereUniqueWithoutFieldInput
  >;
  deleteMany?: Maybe<CardFieldScalarWhereInput[] | CardFieldScalarWhereInput>;
  updateMany?: Maybe<
    | CardFieldUpdateManyWithWhereNestedInput[]
    | CardFieldUpdateManyWithWhereNestedInput
  >;
}

export interface CardFieldUpdateWithWhereUniqueWithoutFieldInput {
  where: CardFieldWhereUniqueInput;
  data: CardFieldUpdateWithoutFieldDataInput;
}

export interface CardFieldUpdateWithoutFieldDataInput {
  order?: Maybe<Int>;
  cards?: Maybe<CardUpdateManyWithoutFieldsInput>;
  groups?: Maybe<FieldUpdateManyWithoutGroupFieldsInput>;
}

export interface CardFieldUpsertWithWhereUniqueWithoutFieldInput {
  where: CardFieldWhereUniqueInput;
  update: CardFieldUpdateWithoutFieldDataInput;
  create: CardFieldCreateWithoutFieldInput;
}

export interface FieldUpsertWithWhereUniqueWithoutGroupFieldsInput {
  where: FieldWhereUniqueInput;
  update: FieldUpdateWithoutGroupFieldsDataInput;
  create: FieldCreateWithoutGroupFieldsInput;
}

export interface FieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  grid?: Maybe<Int>;
  grid_not?: Maybe<Int>;
  grid_in?: Maybe<Int[] | Int>;
  grid_not_in?: Maybe<Int[] | Int>;
  grid_lt?: Maybe<Int>;
  grid_lte?: Maybe<Int>;
  grid_gt?: Maybe<Int>;
  grid_gte?: Maybe<Int>;
  type?: Maybe<FieldType>;
  type_not?: Maybe<FieldType>;
  type_in?: Maybe<FieldType[] | FieldType>;
  type_not_in?: Maybe<FieldType[] | FieldType>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  rows?: Maybe<Int>;
  rows_not?: Maybe<Int>;
  rows_in?: Maybe<Int[] | Int>;
  rows_not_in?: Maybe<Int[] | Int>;
  rows_lt?: Maybe<Int>;
  rows_lte?: Maybe<Int>;
  rows_gt?: Maybe<Int>;
  rows_gte?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  rowsMax_not?: Maybe<Int>;
  rowsMax_in?: Maybe<Int[] | Int>;
  rowsMax_not_in?: Maybe<Int[] | Int>;
  rowsMax_lt?: Maybe<Int>;
  rowsMax_lte?: Maybe<Int>;
  rowsMax_gt?: Maybe<Int>;
  rowsMax_gte?: Maybe<Int>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  valueFrom?: Maybe<String>;
  valueFrom_not?: Maybe<String>;
  valueFrom_in?: Maybe<String[] | String>;
  valueFrom_not_in?: Maybe<String[] | String>;
  valueFrom_lt?: Maybe<String>;
  valueFrom_lte?: Maybe<String>;
  valueFrom_gt?: Maybe<String>;
  valueFrom_gte?: Maybe<String>;
  valueFrom_contains?: Maybe<String>;
  valueFrom_not_contains?: Maybe<String>;
  valueFrom_starts_with?: Maybe<String>;
  valueFrom_not_starts_with?: Maybe<String>;
  valueFrom_ends_with?: Maybe<String>;
  valueFrom_not_ends_with?: Maybe<String>;
  AND?: Maybe<FieldScalarWhereInput[] | FieldScalarWhereInput>;
  OR?: Maybe<FieldScalarWhereInput[] | FieldScalarWhereInput>;
  NOT?: Maybe<FieldScalarWhereInput[] | FieldScalarWhereInput>;
}

export interface FieldUpdateManyWithWhereNestedInput {
  where: FieldScalarWhereInput;
  data: FieldUpdateManyDataInput;
}

export interface FieldUpdateManyDataInput {
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label?: Maybe<String>;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
}

export interface CardFieldUpsertWithWhereUniqueWithoutCardsInput {
  where: CardFieldWhereUniqueInput;
  update: CardFieldUpdateWithoutCardsDataInput;
  create: CardFieldCreateWithoutCardsInput;
}

export interface CardUpdateManyMutationInput {
  title?: Maybe<String>;
  grid?: Maybe<Int>;
}

export interface CardFieldCreateInput {
  id?: Maybe<ID_Input>;
  order: Int;
  field?: Maybe<FieldCreateOneWithoutCardFieldInput>;
  cards?: Maybe<CardCreateManyWithoutFieldsInput>;
  groups?: Maybe<FieldCreateManyWithoutGroupFieldsInput>;
}

export interface CardFieldUpdateInput {
  order?: Maybe<Int>;
  field?: Maybe<FieldUpdateOneWithoutCardFieldInput>;
  cards?: Maybe<CardUpdateManyWithoutFieldsInput>;
  groups?: Maybe<FieldUpdateManyWithoutGroupFieldsInput>;
}

export interface CardFieldUpdateManyMutationInput {
  order?: Maybe<Int>;
}

export interface FieldCreateInput {
  id?: Maybe<ID_Input>;
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label: String;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  groupFields?: Maybe<CardFieldCreateManyWithoutGroupsInput>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
  options?: Maybe<FieldOptionCreateManyInput>;
  cardField?: Maybe<CardFieldCreateManyWithoutFieldInput>;
}

export interface FieldUpdateInput {
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label?: Maybe<String>;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  groupFields?: Maybe<CardFieldUpdateManyWithoutGroupsInput>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
  options?: Maybe<FieldOptionUpdateManyInput>;
  cardField?: Maybe<CardFieldUpdateManyWithoutFieldInput>;
}

export interface FieldUpdateManyMutationInput {
  grid?: Maybe<Int>;
  type?: Maybe<FieldType>;
  label?: Maybe<String>;
  name?: Maybe<String>;
  rows?: Maybe<Int>;
  rowsMax?: Maybe<Int>;
  value?: Maybe<String>;
  valueFrom?: Maybe<String>;
}

export interface FieldOptionUpdateInput {
  label?: Maybe<String>;
  value?: Maybe<String>;
}

export interface FieldOptionUpdateManyMutationInput {
  label?: Maybe<String>;
  value?: Maybe<String>;
}

export interface FormCreateInput {
  id?: Maybe<ID_Input>;
  cards?: Maybe<FormCardCreateManyWithoutFormInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface FormCardCreateManyWithoutFormInput {
  create?: Maybe<
    FormCardCreateWithoutFormInput[] | FormCardCreateWithoutFormInput
  >;
  connect?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
}

export interface FormCardCreateWithoutFormInput {
  id?: Maybe<ID_Input>;
  order: Int;
  card?: Maybe<CardCreateOneWithoutFormCardInput>;
}

export interface CardCreateOneWithoutFormCardInput {
  create?: Maybe<CardCreateWithoutFormCardInput>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface CardCreateWithoutFormCardInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  grid?: Maybe<Int>;
  fields?: Maybe<CardFieldCreateManyWithoutCardsInput>;
}

export interface FormUpdateInput {
  cards?: Maybe<FormCardUpdateManyWithoutFormInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface FormCardUpdateManyWithoutFormInput {
  create?: Maybe<
    FormCardCreateWithoutFormInput[] | FormCardCreateWithoutFormInput
  >;
  delete?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  connect?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  set?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  disconnect?: Maybe<FormCardWhereUniqueInput[] | FormCardWhereUniqueInput>;
  update?: Maybe<
    | FormCardUpdateWithWhereUniqueWithoutFormInput[]
    | FormCardUpdateWithWhereUniqueWithoutFormInput
  >;
  upsert?: Maybe<
    | FormCardUpsertWithWhereUniqueWithoutFormInput[]
    | FormCardUpsertWithWhereUniqueWithoutFormInput
  >;
  deleteMany?: Maybe<FormCardScalarWhereInput[] | FormCardScalarWhereInput>;
  updateMany?: Maybe<
    | FormCardUpdateManyWithWhereNestedInput[]
    | FormCardUpdateManyWithWhereNestedInput
  >;
}

export interface FormCardUpdateWithWhereUniqueWithoutFormInput {
  where: FormCardWhereUniqueInput;
  data: FormCardUpdateWithoutFormDataInput;
}

export interface FormCardUpdateWithoutFormDataInput {
  order?: Maybe<Int>;
  card?: Maybe<CardUpdateOneWithoutFormCardInput>;
}

export interface CardUpdateOneWithoutFormCardInput {
  create?: Maybe<CardCreateWithoutFormCardInput>;
  update?: Maybe<CardUpdateWithoutFormCardDataInput>;
  upsert?: Maybe<CardUpsertWithoutFormCardInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface CardUpdateWithoutFormCardDataInput {
  title?: Maybe<String>;
  grid?: Maybe<Int>;
  fields?: Maybe<CardFieldUpdateManyWithoutCardsInput>;
}

export interface CardUpsertWithoutFormCardInput {
  update: CardUpdateWithoutFormCardDataInput;
  create: CardCreateWithoutFormCardInput;
}

export interface FormCardUpsertWithWhereUniqueWithoutFormInput {
  where: FormCardWhereUniqueInput;
  update: FormCardUpdateWithoutFormDataInput;
  create: FormCardCreateWithoutFormInput;
}

export interface FormUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface FormCardCreateInput {
  id?: Maybe<ID_Input>;
  order: Int;
  card?: Maybe<CardCreateOneWithoutFormCardInput>;
  form: FormCreateOneWithoutCardsInput;
}

export interface FormCardUpdateInput {
  order?: Maybe<Int>;
  card?: Maybe<CardUpdateOneWithoutFormCardInput>;
  form?: Maybe<FormUpdateOneRequiredWithoutCardsInput>;
}

export interface FormCardUpdateManyMutationInput {
  order?: Maybe<Int>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  claimId: ID_Input;
  data?: Maybe<Json>;
  status?: Maybe<ReportStatus>;
}

export interface ReportUpdateInput {
  claimId?: Maybe<ID_Input>;
  data?: Maybe<Json>;
  status?: Maybe<ReportStatus>;
}

export interface ReportUpdateManyMutationInput {
  claimId?: Maybe<ID_Input>;
  data?: Maybe<Json>;
  status?: Maybe<ReportStatus>;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardWhereInput>;
  AND?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  OR?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  NOT?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
}

export interface CardFieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardFieldWhereInput>;
  AND?: Maybe<
    CardFieldSubscriptionWhereInput[] | CardFieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    CardFieldSubscriptionWhereInput[] | CardFieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CardFieldSubscriptionWhereInput[] | CardFieldSubscriptionWhereInput
  >;
}

export interface FieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FieldWhereInput>;
  AND?: Maybe<FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput>;
  OR?: Maybe<FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput>;
  NOT?: Maybe<FieldSubscriptionWhereInput[] | FieldSubscriptionWhereInput>;
}

export interface FieldOptionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FieldOptionWhereInput>;
  AND?: Maybe<
    FieldOptionSubscriptionWhereInput[] | FieldOptionSubscriptionWhereInput
  >;
  OR?: Maybe<
    FieldOptionSubscriptionWhereInput[] | FieldOptionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FieldOptionSubscriptionWhereInput[] | FieldOptionSubscriptionWhereInput
  >;
}

export interface FormSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FormWhereInput>;
  AND?: Maybe<FormSubscriptionWhereInput[] | FormSubscriptionWhereInput>;
  OR?: Maybe<FormSubscriptionWhereInput[] | FormSubscriptionWhereInput>;
  NOT?: Maybe<FormSubscriptionWhereInput[] | FormSubscriptionWhereInput>;
}

export interface FormCardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FormCardWhereInput>;
  AND?: Maybe<
    FormCardSubscriptionWhereInput[] | FormCardSubscriptionWhereInput
  >;
  OR?: Maybe<FormCardSubscriptionWhereInput[] | FormCardSubscriptionWhereInput>;
  NOT?: Maybe<
    FormCardSubscriptionWhereInput[] | FormCardSubscriptionWhereInput
  >;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  OR?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  NOT?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Card {
  id: ID_Output;
  title?: String;
  grid: Int;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  grid: () => Promise<Int>;
  formCard: <T = FragmentableArray<FormCard>>(args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fields: <T = FragmentableArray<CardField>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  grid: () => Promise<AsyncIterator<Int>>;
  formCard: <T = Promise<AsyncIterator<FormCardSubscription>>>(args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fields: <T = Promise<AsyncIterator<CardFieldSubscription>>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardNullablePromise
  extends Promise<Card | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  grid: () => Promise<Int>;
  formCard: <T = FragmentableArray<FormCard>>(args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fields: <T = FragmentableArray<CardField>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FormCard {
  id: ID_Output;
  order: Int;
}

export interface FormCardPromise extends Promise<FormCard>, Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
  card: <T = CardPromise>() => T;
  form: <T = FormPromise>() => T;
}

export interface FormCardSubscription
  extends Promise<AsyncIterator<FormCard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: () => Promise<AsyncIterator<Int>>;
  card: <T = CardSubscription>() => T;
  form: <T = FormSubscription>() => T;
}

export interface FormCardNullablePromise
  extends Promise<FormCard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
  card: <T = CardPromise>() => T;
  form: <T = FormPromise>() => T;
}

export interface Form {
  id: ID_Output;
  title?: String;
  description?: String;
}

export interface FormPromise extends Promise<Form>, Fragmentable {
  id: () => Promise<ID_Output>;
  cards: <T = FragmentableArray<FormCard>>(args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface FormSubscription
  extends Promise<AsyncIterator<Form>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cards: <T = Promise<AsyncIterator<FormCardSubscription>>>(args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface FormNullablePromise
  extends Promise<Form | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cards: <T = FragmentableArray<FormCard>>(args?: {
    where?: FormCardWhereInput;
    orderBy?: FormCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CardField {
  id: ID_Output;
  order: Int;
}

export interface CardFieldPromise extends Promise<CardField>, Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
  field: <T = FieldPromise>() => T;
  cards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groups: <T = FragmentableArray<Field>>(args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardFieldSubscription
  extends Promise<AsyncIterator<CardField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: () => Promise<AsyncIterator<Int>>;
  field: <T = FieldSubscription>() => T;
  cards: <T = Promise<AsyncIterator<CardSubscription>>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groups: <T = Promise<AsyncIterator<FieldSubscription>>>(args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardFieldNullablePromise
  extends Promise<CardField | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
  field: <T = FieldPromise>() => T;
  cards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groups: <T = FragmentableArray<Field>>(args?: {
    where?: FieldWhereInput;
    orderBy?: FieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Field {
  id: ID_Output;
  grid: Int;
  type: FieldType;
  label: String;
  name?: String;
  rows?: Int;
  rowsMax?: Int;
  value?: String;
  valueFrom?: String;
}

export interface FieldPromise extends Promise<Field>, Fragmentable {
  id: () => Promise<ID_Output>;
  grid: () => Promise<Int>;
  type: () => Promise<FieldType>;
  label: () => Promise<String>;
  name: () => Promise<String>;
  rows: () => Promise<Int>;
  rowsMax: () => Promise<Int>;
  groupFields: <T = FragmentableArray<CardField>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  value: () => Promise<String>;
  valueFrom: () => Promise<String>;
  options: <T = FragmentableArray<FieldOption>>(args?: {
    where?: FieldOptionWhereInput;
    orderBy?: FieldOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cardField: <T = FragmentableArray<CardField>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FieldSubscription
  extends Promise<AsyncIterator<Field>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  grid: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<FieldType>>;
  label: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  rows: () => Promise<AsyncIterator<Int>>;
  rowsMax: () => Promise<AsyncIterator<Int>>;
  groupFields: <T = Promise<AsyncIterator<CardFieldSubscription>>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  value: () => Promise<AsyncIterator<String>>;
  valueFrom: () => Promise<AsyncIterator<String>>;
  options: <T = Promise<AsyncIterator<FieldOptionSubscription>>>(args?: {
    where?: FieldOptionWhereInput;
    orderBy?: FieldOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cardField: <T = Promise<AsyncIterator<CardFieldSubscription>>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FieldNullablePromise
  extends Promise<Field | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  grid: () => Promise<Int>;
  type: () => Promise<FieldType>;
  label: () => Promise<String>;
  name: () => Promise<String>;
  rows: () => Promise<Int>;
  rowsMax: () => Promise<Int>;
  groupFields: <T = FragmentableArray<CardField>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  value: () => Promise<String>;
  valueFrom: () => Promise<String>;
  options: <T = FragmentableArray<FieldOption>>(args?: {
    where?: FieldOptionWhereInput;
    orderBy?: FieldOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cardField: <T = FragmentableArray<CardField>>(args?: {
    where?: CardFieldWhereInput;
    orderBy?: CardFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FieldOption {
  id: ID_Output;
  label: String;
  value: String;
}

export interface FieldOptionPromise extends Promise<FieldOption>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  value: () => Promise<String>;
}

export interface FieldOptionSubscription
  extends Promise<AsyncIterator<FieldOption>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface FieldOptionNullablePromise
  extends Promise<FieldOption | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  value: () => Promise<String>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardFieldConnection {
  pageInfo: PageInfo;
  edges: CardFieldEdge[];
}

export interface CardFieldConnectionPromise
  extends Promise<CardFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardFieldEdge>>() => T;
  aggregate: <T = AggregateCardFieldPromise>() => T;
}

export interface CardFieldConnectionSubscription
  extends Promise<AsyncIterator<CardFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardFieldSubscription>() => T;
}

export interface CardFieldEdge {
  node: CardField;
  cursor: String;
}

export interface CardFieldEdgePromise
  extends Promise<CardFieldEdge>,
    Fragmentable {
  node: <T = CardFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardFieldEdgeSubscription
  extends Promise<AsyncIterator<CardFieldEdge>>,
    Fragmentable {
  node: <T = CardFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCardField {
  count: Int;
}

export interface AggregateCardFieldPromise
  extends Promise<AggregateCardField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardFieldSubscription
  extends Promise<AsyncIterator<AggregateCardField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FieldConnection {
  pageInfo: PageInfo;
  edges: FieldEdge[];
}

export interface FieldConnectionPromise
  extends Promise<FieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FieldEdge>>() => T;
  aggregate: <T = AggregateFieldPromise>() => T;
}

export interface FieldConnectionSubscription
  extends Promise<AsyncIterator<FieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFieldSubscription>() => T;
}

export interface FieldEdge {
  node: Field;
  cursor: String;
}

export interface FieldEdgePromise extends Promise<FieldEdge>, Fragmentable {
  node: <T = FieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FieldEdgeSubscription
  extends Promise<AsyncIterator<FieldEdge>>,
    Fragmentable {
  node: <T = FieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateField {
  count: Int;
}

export interface AggregateFieldPromise
  extends Promise<AggregateField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFieldSubscription
  extends Promise<AsyncIterator<AggregateField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FieldOptionConnection {
  pageInfo: PageInfo;
  edges: FieldOptionEdge[];
}

export interface FieldOptionConnectionPromise
  extends Promise<FieldOptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FieldOptionEdge>>() => T;
  aggregate: <T = AggregateFieldOptionPromise>() => T;
}

export interface FieldOptionConnectionSubscription
  extends Promise<AsyncIterator<FieldOptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FieldOptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFieldOptionSubscription>() => T;
}

export interface FieldOptionEdge {
  node: FieldOption;
  cursor: String;
}

export interface FieldOptionEdgePromise
  extends Promise<FieldOptionEdge>,
    Fragmentable {
  node: <T = FieldOptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FieldOptionEdgeSubscription
  extends Promise<AsyncIterator<FieldOptionEdge>>,
    Fragmentable {
  node: <T = FieldOptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFieldOption {
  count: Int;
}

export interface AggregateFieldOptionPromise
  extends Promise<AggregateFieldOption>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFieldOptionSubscription
  extends Promise<AsyncIterator<AggregateFieldOption>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FormConnection {
  pageInfo: PageInfo;
  edges: FormEdge[];
}

export interface FormConnectionPromise
  extends Promise<FormConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FormEdge>>() => T;
  aggregate: <T = AggregateFormPromise>() => T;
}

export interface FormConnectionSubscription
  extends Promise<AsyncIterator<FormConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FormEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFormSubscription>() => T;
}

export interface FormEdge {
  node: Form;
  cursor: String;
}

export interface FormEdgePromise extends Promise<FormEdge>, Fragmentable {
  node: <T = FormPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FormEdgeSubscription
  extends Promise<AsyncIterator<FormEdge>>,
    Fragmentable {
  node: <T = FormSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForm {
  count: Int;
}

export interface AggregateFormPromise
  extends Promise<AggregateForm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFormSubscription
  extends Promise<AsyncIterator<AggregateForm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FormCardConnection {
  pageInfo: PageInfo;
  edges: FormCardEdge[];
}

export interface FormCardConnectionPromise
  extends Promise<FormCardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FormCardEdge>>() => T;
  aggregate: <T = AggregateFormCardPromise>() => T;
}

export interface FormCardConnectionSubscription
  extends Promise<AsyncIterator<FormCardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FormCardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFormCardSubscription>() => T;
}

export interface FormCardEdge {
  node: FormCard;
  cursor: String;
}

export interface FormCardEdgePromise
  extends Promise<FormCardEdge>,
    Fragmentable {
  node: <T = FormCardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FormCardEdgeSubscription
  extends Promise<AsyncIterator<FormCardEdge>>,
    Fragmentable {
  node: <T = FormCardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFormCard {
  count: Int;
}

export interface AggregateFormCardPromise
  extends Promise<AggregateFormCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFormCardSubscription
  extends Promise<AsyncIterator<AggregateFormCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Report {
  id: ID_Output;
  claimId: ID_Output;
  data: Json;
  status: ReportStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  claimId: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  status: () => Promise<ReportStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  claimId: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<ReportStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  claimId: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  status: () => Promise<ReportStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface CardPreviousValues {
  id: ID_Output;
  title?: String;
  grid: Int;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  grid: () => Promise<Int>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  grid: () => Promise<AsyncIterator<Int>>;
}

export interface CardFieldSubscriptionPayload {
  mutation: MutationType;
  node: CardField;
  updatedFields: String[];
  previousValues: CardFieldPreviousValues;
}

export interface CardFieldSubscriptionPayloadPromise
  extends Promise<CardFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardFieldPreviousValuesPromise>() => T;
}

export interface CardFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardFieldPreviousValuesSubscription>() => T;
}

export interface CardFieldPreviousValues {
  id: ID_Output;
  order: Int;
}

export interface CardFieldPreviousValuesPromise
  extends Promise<CardFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
}

export interface CardFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<CardFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface FieldSubscriptionPayload {
  mutation: MutationType;
  node: Field;
  updatedFields: String[];
  previousValues: FieldPreviousValues;
}

export interface FieldSubscriptionPayloadPromise
  extends Promise<FieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FieldPreviousValuesPromise>() => T;
}

export interface FieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FieldPreviousValuesSubscription>() => T;
}

export interface FieldPreviousValues {
  id: ID_Output;
  grid: Int;
  type: FieldType;
  label: String;
  name?: String;
  rows?: Int;
  rowsMax?: Int;
  value?: String;
  valueFrom?: String;
}

export interface FieldPreviousValuesPromise
  extends Promise<FieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  grid: () => Promise<Int>;
  type: () => Promise<FieldType>;
  label: () => Promise<String>;
  name: () => Promise<String>;
  rows: () => Promise<Int>;
  rowsMax: () => Promise<Int>;
  value: () => Promise<String>;
  valueFrom: () => Promise<String>;
}

export interface FieldPreviousValuesSubscription
  extends Promise<AsyncIterator<FieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  grid: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<FieldType>>;
  label: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  rows: () => Promise<AsyncIterator<Int>>;
  rowsMax: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valueFrom: () => Promise<AsyncIterator<String>>;
}

export interface FieldOptionSubscriptionPayload {
  mutation: MutationType;
  node: FieldOption;
  updatedFields: String[];
  previousValues: FieldOptionPreviousValues;
}

export interface FieldOptionSubscriptionPayloadPromise
  extends Promise<FieldOptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FieldOptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FieldOptionPreviousValuesPromise>() => T;
}

export interface FieldOptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FieldOptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FieldOptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FieldOptionPreviousValuesSubscription>() => T;
}

export interface FieldOptionPreviousValues {
  id: ID_Output;
  label: String;
  value: String;
}

export interface FieldOptionPreviousValuesPromise
  extends Promise<FieldOptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  value: () => Promise<String>;
}

export interface FieldOptionPreviousValuesSubscription
  extends Promise<AsyncIterator<FieldOptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface FormSubscriptionPayload {
  mutation: MutationType;
  node: Form;
  updatedFields: String[];
  previousValues: FormPreviousValues;
}

export interface FormSubscriptionPayloadPromise
  extends Promise<FormSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FormPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FormPreviousValuesPromise>() => T;
}

export interface FormSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FormSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FormSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FormPreviousValuesSubscription>() => T;
}

export interface FormPreviousValues {
  id: ID_Output;
  title?: String;
  description?: String;
}

export interface FormPreviousValuesPromise
  extends Promise<FormPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface FormPreviousValuesSubscription
  extends Promise<AsyncIterator<FormPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface FormCardSubscriptionPayload {
  mutation: MutationType;
  node: FormCard;
  updatedFields: String[];
  previousValues: FormCardPreviousValues;
}

export interface FormCardSubscriptionPayloadPromise
  extends Promise<FormCardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FormCardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FormCardPreviousValuesPromise>() => T;
}

export interface FormCardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FormCardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FormCardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FormCardPreviousValuesSubscription>() => T;
}

export interface FormCardPreviousValues {
  id: ID_Output;
  order: Int;
}

export interface FormCardPreviousValuesPromise
  extends Promise<FormCardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
}

export interface FormCardPreviousValuesSubscription
  extends Promise<AsyncIterator<FormCardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  claimId: ID_Output;
  data: Json;
  status: ReportStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  claimId: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  status: () => Promise<ReportStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  claimId: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<ReportStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ReportStatus",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  },
  {
    name: "Form",
    embedded: false
  },
  {
    name: "FormCard",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  },
  {
    name: "CardField",
    embedded: false
  },
  {
    name: "FieldType",
    embedded: false
  },
  {
    name: "FieldOption",
    embedded: false
  },
  {
    name: "Field",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
